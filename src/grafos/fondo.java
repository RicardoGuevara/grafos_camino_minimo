/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grafos;

import Objetos.Arco;
import Objetos.Vertice;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.TrayIcon;
import java.awt.TrayIcon.MessageType;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author rick
 */
public class fondo extends javax.swing.JPanel
{

    /**
     * Creates new form fondo
     */
    public fondo()
    {
        fondo = new ImageIcon("seleccion_mapa.jpg").getImage();
        initComponents();
        this.requestFocus();
    }
    
    public void doit()
    {
        this.getGraphics().clearRect(0, 0, this.getWidth(), this.getHeight());
    }

    @Override
    public void paint(Graphics g)
    {
        g.drawImage(fondo, 0, 0,getWidth(),getHeight(),this);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                formKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
    {//GEN-HEADEREND:event_formMouseClicked
        clickOnMap(evt.getPoint());
        requestFocus(); //para poder detectar los pressed
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
        startConnection(evt.getPoint());
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
        endConnection(evt.getPoint());
    }//GEN-LAST:event_formMouseReleased

    private void formKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyTyped
    {//GEN-HEADEREND:event_formKeyTyped
        if(ant_selected!=null)if(evt.getKeyCode()==0)delActualNode(getGraphics());
    }//GEN-LAST:event_formKeyTyped

    
    
    private void startConnection(Point p)
    {
        start = grafos.Grafos.grafo.getNodeAt(p);
    }
    
    private void endConnection(Point p)
    {
        end = grafos.Grafos.grafo.getNodeAt(p);
        if(start!=null && end!=null && (!(start.equals(end))))
        {
            int peso=pedir_valor_arista();
            grafos.Grafos.grafo.add(new Arco(start,end,peso));
            grafos.Grafos.grafo.add(new Arco(end,start,peso));
            drawConnection(getGraphics(),start,end,String.valueOf(peso));
        }
    }
    
    private int pedir_valor_arista()
    {
        while(true)
        {
            try
            {
                return Integer.parseInt(JOptionPane.showInputDialog(this, "Peso de la arista", "Digite el peso de la arista", MessageType.NONE.ordinal()));
            }
            catch(NumberFormatException nfe)
            {
                continue;
            }
        }
    }
    
    private void drawConnection(Graphics g,Vertice s, Vertice e,String peso)
    {
        g.setColor(Color.BLACK);
        g.drawLine(s.getCenter().x, s.getCenter().y, e.getCenter().x, e.getCenter().y);
        g.drawString(peso,(s.getCenter().x+e.getCenter().x)/2,(s.getCenter().y+e.getCenter().y)/2);
    }
    
    private void clickOnMap(Point p)
    {
        Vertice<String> n = evaluate_colission_box_point(p);
        if(n==null) createNode(p);
        else selectNode(n);
    }
    
    private Vertice evaluate_colission_box_point(Point p)
    {
        Vertice<String> n = grafos.Grafos.grafo.getNodeAt(p);
        if(n!=null) return n;
        n = grafos.Grafos.grafo.getNodeAt(new Point(p.x-Vertice.diameter/2,p.y-Vertice.diameter/2));
        if(n!=null) return n;
        n = grafos.Grafos.grafo.getNodeAt(new Point(p.x-Vertice.diameter/2,p.y+Vertice.diameter/2));
        if(n!=null) return n;
        n = grafos.Grafos.grafo.getNodeAt(new Point(p.x+Vertice.diameter/2,p.y-Vertice.diameter/2));
        if(n!=null) return n;
        n = grafos.Grafos.grafo.getNodeAt(new Point(p.x+Vertice.diameter/2,p.y+Vertice.diameter/2));
        return n;
    }
    private void createNode(Point p)
    {
        p= new Point(p.x-(int)(Vertice.diameter/2),p.y-(int)(Vertice.diameter/2)); //ajusta el punto al centro
        Vertice n = new Vertice<String>(p,JOptionPane.showInputDialog(this,"Nombre de este punto","Nombre",TrayIcon.MessageType.NONE.ordinal()));
        if(n.getData()!=null)   //se cancelo la creci칩n del nodo
        {
            grafos.Grafos.grafo.add(n);
            drawPoint(getGraphics(),p,Color.RED);
            drawInfo(getGraphics(),n);
        }
        v.actualizar_listas();
    }
    
    private void selectNode(Vertice n)
    {
        if(ant_selected!=null)
        {
            drawPoint(getGraphics(),ant_selected.getLocation(),Color.RED);
            drawInfo(getGraphics(),ant_selected);
        }
        drawPoint(getGraphics(),n.getLocation(),Color.BLUE);
        drawInfo(getGraphics(),n);
        ant_selected = n;
    }
    
    private void drawPoint(Graphics g,Point p,Color color)
    {
        //g.setColor(color.darker().darker().darker().darker()); // se침or perdoname por esto 7n7
        //g.setColor(new Color(255-color.getRed(),255-color.getGreen(),255-color.getBlue())); // negativo del color
        g.setColor(Color.BLACK);
        g.drawOval(p.x, p.y, Vertice.diameter, Vertice.diameter);
        g.setColor(color);
        g.fillOval(p.x, p.y, Vertice.diameter, Vertice.diameter);
    }
    
    private void drawInfo(Graphics g ,Vertice n)
    {
        g.setColor(Color.WHITE);
        g.drawString((String)n.getData(), n.getLocation().x+5, n.getCenter().y);
    }
    
    
    private void delActualNode(Graphics g)
    {
        //Rectangle r = ant_selected.getSpace();
        //g.clearRect(r.x, r.y, r.width, r.height);
        grafos.Grafos.grafo.del(ant_selected);
        ant_selected=null;
        reloadGraph(getGraphics());
    }
    
    private void reloadGraph(Graphics g)
    {
        //label_fondo_mapa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/seleccion_mapa.jpg")));
        //label_fondo_mapa.repaint();
        //g.clearRect(0,0,getWidth(),getHeight());
        paint(g);
        java.util.ArrayList<Vertice> nodes = (grafos.Grafos.grafo.getNodes());
        for (Vertice node : nodes)
        {
            drawPoint(g,node.getLocation(),Color.RED);
            drawInfo(g,node);
        }
        java.util.ArrayList<Arco> cons = (grafos.Grafos.grafo.getConnections());
        for (Arco con : cons)
        {
            System.out.println(con);
            drawConnection(g,con.getStart_point(),con.getEnd_point(),String.valueOf(con.getWeight()));
        }
        v.actualizar_listas();
        requestFocus();
    }
    
    
    
    
    private Vertice ant_selected,   //anterior nodo seleccionado
                    start,          //inicio de conecci칩n
                    end;            //fin de conecci칩n

    Ventana v;
    
    private Image fondo;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
